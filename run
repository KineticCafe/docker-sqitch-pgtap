#! /bin/bash

declare image var cmd user uname_s
image=${IMAGE:-kineticcafe/sqitch-pgtap:latest}

user="${USER-$(whoami)}"
uname_s="$(uname -s)"

if ((!$#)); then
  echo >&2 "No command given."
  exit 1
fi

case "$1" in
sqitch) cmd=/home/sqitcher/bin/do_sqitch ;;
pg_prove) cmd=/home/sqitcher/bin/do_pg_prove ;;
pgtap) cmd=/home/sqitcher/bin/do_pgtap ;;
createdb | dropdb | psql) cmd="$1" ;;
pg_config | pg_controldata | pg_ctl) cmd="$1" ;;
pg_archivecleanup | pg_basebackup) cmd="$1" ;;
pg_dump | pg_dumpall | pg_restore) cmd="$1" ;;
pg_isready | pg_standby | pg_test_fsync | pg_test_timing) cmd="$1" ;;
pg_recvlogical | pg_rewind | pg_upgrade) cmd="$1" ;;
pg_receivexlog | pg_resetxlog | pg_xlogdump) cmd="$1" ;;
*)
  echo "Unknown command '$1'."
  exit 1
  ;;
esac

shift

declare -a passopt
passopt=(
  -e "SQITCH_ORIG_SYSUSER=${user}"
  -e "SQITCH_ORIG_EMAIL=${user}@$(hostname)"
  -e "TZ=$(date +%Z)"
  -e "LESS=${LESS:--R}"
)

case "${uname_s}" in
Linux*)
  passopt+=(-e "SQITCH_ORIG_FULLNAME=$(getent passwd "${user}" | cut -d: -f5 | cut -d, -f1)")
  passopt+=(-u "$(id -u "${user}"):$(id -g "${user}")")
  ;;
Darwin*)
  passopt+=(-e "SQITCH_ORIG_FULLNAME=$(/usr/bin/id -P "${user}" | awk -F '[:]' '{print $8}')")
  ;;
MINGW* | CYGWIN*)
  passopt+=(-e "SQITCH_ORIG_FULLNAME=$(net user "${user}")")
  ;;
*)
  echo "Unknown OS: ${uname_s}"
  exit 2
  ;;
esac

: PGHOST="${PGHOST:-host.docker.internal}"
: PGPORT="${PGPORT:-5432}"

if [[ "$(uname -s)" == Darwin ]]; then
  PGUSER="${PGUSER:-${USER}}"
fi

for var in \
  SQITCH_CONFIG SQITCH_EMAIL SQITCH_FULLNAME SQITCH_PASSWORD SQITCH_TARGET \
  SQITCH_USERNAME \
  DBI_TRACE \
  PGUSER PGPASSWORD PGHOST PGHOSTADDR PGPORT PGDATABASE PGSERVICE PGOPTIONS \
  PGSSLMODE PGREQUIRESSL PGSSLCOMPRESSION PGREQUIREPEER PGKRBSRVNAME \
  PGKRBSRVNAME PGGSSLIB PGCONNECT_TIMEOUT PGCLIENTENCODING \
  PGTARGETSESSIONATTRS; do
  [[ -n "${!var}" ]] && passopt+=("-e" "${var}=${!var}")
done

homedst=/home/"${user}"
if [[ "$(id -u "${user}")" -eq 0 ]]; then
  homedst=/root
fi
passopt+=(-e "HOME=${homedst}")

docker run -it --rm --network host \
  --mount "type=bind,src=$(pwd),dst=/repo" \
  --mount "type=bind,src=${HOME},dst=${homedst}" \
  "${passopt[@]}" "${image}" "${cmd}" "$@"
